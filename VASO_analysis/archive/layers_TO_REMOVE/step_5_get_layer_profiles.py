"""
Created on Thu Oct 14 18:43:35 2021
    Get Layer Profiles and Plot:

        Input: metric file, activation map (no thresholded) [percent signal change or t-map], set of voxels (mask)

@author: apizz
"""
import numpy as np
import nibabel as nb
import matplotlib.pyplot as plt
import matplotlib as mpl
import os
from my_layer_profiles import *

STUDY_PATH = "D:\\Pilot_Exp_VASO\\pilotAOM"
SUBJ = ['sub-02', 'sub-03', 'sub-04', 'sub-05', 'sub-06']
CONDT = ['standard']
FUNC = ['BOLD', 'VASO']
MASK = ["BOLD_CV_AVG", "VASO_CV_AVG"]            # "BOLD_CV_AVG", "VASO_CV_AVG", "BOLD_vox", "VASO_vox"
ROI = ['leftMT_Sphere16radius']
n_lay = 3
tag = 'psc' # tmap

PATH_OUT = os.path.join(STUDY_PATH, 'Results', 'LayerProfiles')

my_dpi = 96
# fig1, axs1 = plt.subplots(nrows=len(SUBJ), ncols=2, figsize=(1920/my_dpi, 1080/my_dpi),
#             dpi=my_dpi)
plt.style.use('dark_background')
# fig1.suptitle('Layers Recruitment and Profiles for {}'.format(MASK))
fig2, axs2 = plt.subplots(nrows=len(SUBJ), ncols=len(MASK), figsize=(1920/my_dpi, 1920/my_dpi),
                dpi=my_dpi)


# fig2.suptitle('2D Histogram for {}'.format(MASK))

all_sbj_layerBOLD = []
all_sbj_layerVASO = []

all_sbj_binBOLD = []
all_sbj_binVASO = []

for itSbj, si in enumerate(SUBJ):

    for co in CONDT:

        for it, fu in enumerate(FUNC):


            PATH_ACT = os.path.join(STUDY_PATH, si, 'derivatives', 'func', 'AOM', 'vaso_analysis', co, 'layers_columns', 'res_pt2')

            PATH_LAY = os.path.join(STUDY_PATH, si, 'derivatives', 'anat', 'layers_4')

            # FILE1: Activation maps
            if tag == 'psc':
                FILE1 = os.path.join(PATH_ACT, 'psc', 'act_allTask_{}_scaled_4.nii.gz'.format(fu))
            else:
                FILE1 = os.path.join(PATH_ACT, 't_maps', '{}_leftMT_Sphere16radius_{}_t_map_fix_hd_scaled_4.nii.gz'.format(si, fu))
            nii1 = nb.load(FILE1)
            vox_map = nii1.get_fdata()
            vox_map = vox_map.flatten()
            idx1 = vox_map > 0

            # FILE2: Mask
            FILE2 = os.path.join(PATH_ACT, "{}_leftMT_Sphere16radius_{}_mask_scaled_4.nii.gz".format(si, MASK[it]))
            nii2 = nb.load(FILE2)
            vox_mask = nii2.get_fdata()
            vox_mask = vox_mask.flatten()
            idx2 = vox_mask > 0
            idx_act_vox = idx1 * idx2         # combining activation and mask

            # FILE3: Metric file generated by LN2_LAYERS
            FILE3 = os.path.join(PATH_LAY, '{}_seg_rim_4_9_metric_equivol.nii'.format(si))
            nii3 = nb.load(FILE3)
            metric = nii3.get_fdata()
            dims = np.shape(nii2)
            metric = metric.flatten()
            idx3 = metric > 0

            # Layer quantization
            layers = my_layer_profiles(metric, n_lay)

            # Count #vox for each layer
            lay_rect = np.zeros(n_lay)
            lay_act = np.zeros(n_lay)
            vox_act_lay = np.zeros(n_lay)
            idx_layers = np.asarray(range(1, n_lay + 1))
            for i, lay in enumerate(idx_layers):
                vox_lay = np.sum(layers == lay)
                vox_act_lay[i] = np.sum((layers == lay) * idx_act_vox)
                # lay_rect[i] = vox_act_lay/vox_lay
                lay_act[i] = np.mean(vox_map[(layers == lay) * idx_act_vox])
                # print("{}, {}, Layer {}, n. vox: {}, n. activeted vox.: {}, perc. recruit. {}, with intensity {}".format(si, fu, lay, vox_lay, vox_act_lay, lay_rect[i], lay_act[i]))

            idx = idx3 * idx_act_vox
            # clipping BOLD
            if fu == "BOLD":
                y = vox_map[idx]
                n_bins = [10, 10]
                y[y > 0.1] = 0.1
                lim = np.array((0, 10))
                all_sbj_layerBOLD.append(lay_act)
                all_sbj_binBOLD.append(vox_act_lay)
            else:
                y = vox_map[idx]
                n_bins = [10, 10]
                lim = np.array((0, 4))
                all_sbj_layerVASO.append(lay_act)
                all_sbj_binVASO.append(vox_act_lay)

            # Fig.1) Plotting: 2D histogram
            im = axs2[itSbj, it].hist2d(metric[idx], y*100, bins=n_bins, cmap='magma', norm=mpl.colors.LogNorm())
            axs2[itSbj, it].set_xlim((0, 1))

            axs2[itSbj, it].set_ylim(lim)
            axs2[itSbj, it].set_xlabel("Normalized cortical depth", fontsize=20)
            axs2[itSbj, it].set_ylabel("Percent signal change (%)", fontsize=20)
            cb = fig2.colorbar(im[-1], ax=axs2[itSbj, it])
            cb.ax.tick_params(labelsize=18)
            # axs2[itSbj, it].set_title("{}, {}".format(si, fu))
            axs2[itSbj, it].margins(x=0)
            axs2[itSbj, it].tick_params(axis='both', labelsize=18)

            # Fig.2) Plotting: Recruitment's level
            # axs1[itSbj, 0].plot(idx_layers, lay_rect, linewidth=1, linestyle='-', marker='o', label='{}'.format(fu))
            # axs1[itSbj, 0].set_ylim((0, 0.16))
            # axs1[itSbj, 0].set_xlabel("Layers (0=white matter)")
            # axs1[itSbj, 0].set_ylabel("n.act.vox/n.tot.vox")
            # axs1[itSbj, 0].set_title("{} Layers recruitment".format(si))
            # axs1[itSbj, 0].grid(True)
            # axs1[itSbj, 0].legend()
            # axs1[itSbj, 0].plot(idx_layers, vox_act_lay, linewidth=1, linestyle='-', marker='o', label='{}'.format(fu))
            # axs1[itSbj, 0].set_ylim((0, 0.16))
            # axs1[itSbj, 0].set_xlabel("Layers (0=white matter)")
            # axs1[itSbj, 0].set_ylabel("n.act.vox")
            # # axs1[itSbj, 0].set_title("{} Layers recruitment".format(si))
            # axs1[itSbj, 0].grid(True)
            # axs1[itSbj, 0].legend()


            # Plotting: Layer Profiles
            # axs1[itSbj, 1].plot(idx_layers, lay_act*100, linewidth=1, linestyle='-', marker='o', label='{}'.format(fu))
            # axs1[itSbj, 1].set_ylim((0, 6))
            # axs1[itSbj, 1].set_xlabel("Layers (0=white matter)")
            # axs1[itSbj, 1].set_ylabel("Percent Signal Change")
            # axs1[itSbj, 1].set_title("{} Layers Profiles".format(si))
            # axs1[itSbj, 1].grid(True)
            # axs1[itSbj, 1].legend()

# fig1.tight_layout()
# fig1.savefig(os.path.join(PATH_OUT,'{}_LayerProfiles_{}_mask_{}'.format(SUBJ, ROI[0], MASK)), bbox_inches='tight')
#fig1.show()

fig2.tight_layout()
fig2.savefig(os.path.join(PATH_OUT,'{}_2DHistogram_{}_mask_{}_black_magma_100.svg'.format(SUBJ, ROI[0], MASK)), bbox_inches='tight')
fig2.savefig(os.path.join(PATH_OUT,'{}_2DHistogram_{}_mask_{}_black_magma_100.jpeg'.format(SUBJ, ROI[0], MASK)), bbox_inches='tight')
#fig2.show()
AVG_RESULTS = {}
AVG_RESULTS = {"layerProfilesVASO": all_sbj_layerVASO, "layerProfilesBOLD": all_sbj_layerBOLD,
                             "binBOLD": all_sbj_binBOLD,"binVASO": all_sbj_binVASO}
np.save(os.path.join(PATH_OUT, "AllSbj_LayerProfiles") ,AVG_RESULTS, allow_pickle=True)
