"""
Created on Thu Nov  4 13:12:54 2021
Plot layer profiles, double axes

@author: apizz
"""

import numpy as np
import nibabel as nb
import matplotlib.pyplot as plt
import os
from my_layer_profiles import *

STUDY_PATH = "D:\\Pilot_Exp_VASO\\pilotAOM"
SUBJ = ['sub-06']
CONDT = ['standard']
FUNC = ['BOLD', 'VASO']
MASK = ["BOLD_CV_AVG", "VASO_CV_AVG"]            # "BOLD_CV_AVG", "VASO_CV_AVG", "BOLD_vox", "VASO_vox"
ROI = ['leftMT_Sphere16radius']
n_lay = 3
tag = 'psc'

PATH_OUT = os.path.join(STUDY_PATH, 'Results', 'LayerProfiles')

# my_dpi = 96
# fig1, axs1 = plt.subplots(figsize=(1920/my_dpi, 1080/my_dpi),
#             dpi=my_dpi)
fig1, axs1 = plt.subplots()
# fig1.suptitle('Layers Profiles'.format(MASK))


for itSbj, si in enumerate(SUBJ):

    for co in CONDT:

        for it, fu in enumerate(FUNC):


            PATH_ACT = os.path.join(STUDY_PATH, si, 'derivatives', 'func', 'AOM', 'vaso_analysis', co, 'layers_columns', 'res_pt2')

            PATH_LAY = os.path.join(STUDY_PATH, si, 'derivatives', 'anat', 'layers_4')

            # FILE1: Activation maps
            if tag == 'psc':
                FILE1 = os.path.join(PATH_ACT, 'psc', 'act_allTask_{}_scaled_4.nii.gz'.format(fu))
            else:
                FILE1 = os.path.join(PATH_ACT, 't_maps', '{}_leftMT_Sphere16radius_{}_t_map_fix_hd_scaled_4.nii.gz'.format(si, fu))
            nii1 = nb.load(FILE1)
            vox_map = nii1.get_fdata()
            vox_map = vox_map.flatten()
            idx1 = vox_map > 0

            # FILE2: Mask
            FILE2 = os.path.join(PATH_ACT, "{}_leftMT_Sphere16radius_{}_mask_scaled_4.nii.gz".format(si, MASK[it]))
            nii2 = nb.load(FILE2)
            vox_mask = nii2.get_fdata()
            vox_mask = vox_mask.flatten()
            idx2 = vox_mask > 0
            idx_act_vox = idx1 * idx2         # combining activation and mask

            # FILE3: Metric file generated by LN2_LAYERS
            FILE3 = os.path.join(PATH_LAY, '{}_seg_rim_4_9_metric_equivol.nii'.format(si))
            nii3 = nb.load(FILE3)
            metric = nii3.get_fdata()
            dims = np.shape(nii2)
            metric = metric.flatten()
            idx3 = metric > 0

            # Layer quantization
            layers = my_layer_profiles(metric, n_lay)

            # Count #vox for each layer
            lay_rect = np.zeros(n_lay)
            lay_act = np.zeros(n_lay)
            idx_layers = np.asarray(range(1, n_lay + 1))
            for i, lay in enumerate(idx_layers):
                vox_lay = np.sum(layers == lay)
                vox_act_lay = np.sum((layers == lay) * idx_act_vox)
                lay_rect[i] = vox_act_lay/vox_lay
                lay_act[i] = np.mean(vox_map[(layers == lay) * idx_act_vox])
                print("{}, {}, Layer {}, n. vox: {}, n. activeted vox.: {}, perc. recruit. {}, with intensity {}".format(si, fu, lay, vox_lay, vox_act_lay, lay_rect[i], lay_act[i]))
            if it == 0:
                # Plotting: Layer Profiles
                axs1.plot(idx_layers, lay_act*100, linewidth=1, linestyle='-', marker='o', label='{}'.format(fu))
                axs1.set_ylim((0, 5))
                axs1.set_xlabel("Layers (0=white matter)")
                axs1.set_ylabel("BOLD Percent Signal Change", color="blue")
                # axs1.set_title("{} Layers Profiles".format(si))
                # axs1.grid(True)
                # axs1[itSbj].legend()
            else:
                ax2=axs1.twinx()
                ax2.plot(idx_layers, lay_act*100, linewidth=1, linestyle='-', marker='o', label='{}'.format(fu), color="red")
                ax2.set_ylim(0, 5)
                ax2.set_xlabel("Layers (0=white matter)")
                ax2.set_ylabel("VASO Percent Signal Change", color="red")
                # ax2[itSbj].set_title("{} Layers Profiles".format(si))
                # ax2.grid(True)
                # ax2[itSbj].legend()



fig1.tight_layout()
fig1.savefig(os.path.join(PATH_OUT,'{}_LayerProfiles_{}_mask_{}.svg'.format(SUBJ, ROI[0], MASK)), bbox_inches='tight')
fig1.show()
